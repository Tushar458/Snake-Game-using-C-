#include <iostream>
#include <conio.h>
#include <windows.h>
#include <dos.h>
#include"color.hpp"
#include <time.h>
#include<vector>
#define MAXSNAKESIZE 100
#define MAXFRAMEX 20
#define MAXFRAMEY 20
using namespace std;
HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
COORD CursorPosition;
void gotoxy(int x, int y){
	CursorPosition.X = x;
	CursorPosition.Y = y;
	SetConsoleCursorPosition(console, CursorPosition); //sets cursor to print eveyrthing in specified positions
}
void setcursor(bool visible, DWORD size) // set bool visible = 0 - invisible, bool visible = 1 - visible
{
	if(size == 0)
	{
		size = 20;	// default cursor size Changing to numbers from 1 to 20, decreases cursor width
	}
	CONSOLE_CURSOR_INFO lpCursor;	
	lpCursor.bVisible = visible;
	lpCursor.dwSize = size;
	SetConsoleCursorInfo(console,&lpCursor);
}
class Point{
	private:
		int x;
		int y;
	public:
	int highscore=0;

		Point(){            
			x = y = 10; //start position
		} 
		Point(int x, int y){    //constructor
			this -> x = x;
			this -> y = y;
		}
		void SetPoint(int x, int y){  
			this -> x = x;
			this -> y = y;
		}
      
		int GetX(){
			return x;
		}
		int GetY(){
			return y;
		}
		void MoveUp(){
			y--;
			if( y < 0 )
				y = MAXFRAMEY;
		}
		void MoveDown(){
			y++;
			if( y > MAXFRAMEY )
				y = 0;
		}
		void MoveLeft(){
			x--;
			if( x < 0 )
				x = MAXFRAMEX;
		}
		void MoveRight(){
			x++;
			if( x > MAXFRAMEX )
				x = 0;
		}
		void Draw(char ch='O'){
			gotoxy(x,y);
			cout<<dye::green(ch);
		}
        void DrawFruit(char ch='O'){
			gotoxy(x,y);
			cout<<dye::aqua(ch);
		}
		void DrawFruit2(char ch='O')
		{
			gotoxy(x,y);
			cout<<dye::purple(ch);
		}
        void DrawObstacle(char ch='O'){
			gotoxy(x,y);
			cout<<dye::red(ch);
		}
		void Erase(){
			cout<<" ";
		}
		void CopyPos(Point * p){
			p->x = x;
			p->y = y;
		}
		int IsEqual(Point * p){
			if( p->x == x && p->y ==y )
				return 1;
			return 0;
		}
		// void Debug(){
		// 	cout<<"("<<x<<","<<y<<") ";
		// }
};
class Snake{  //main body of the game 
	private:
		Point * cell[MAXSNAKESIZE]; // array of points to represent snake
		int size; // current size of snake
		char dir; // current direction of snake
		Point fruit; 
        Point fruit2;
        Point Obstacle; 
		int state; // bool representing state of snake i.e. living, dead
		int started;
		int blink; // fruit blink
	public:
	int score=0;
	int highscore=0;
		Snake(){         //Constructor
			size = 1; // default size
			cell[0] = new Point(20,20); // 20,20 is default position
			//  for( int i=1; i<MAXSNAKESIZE; i++){
			//  	cell[i] = NULL;
			//  }
			fruit.SetPoint(rand()%MAXFRAMEX, rand()%MAXFRAMEY);
            fruit2.SetPoint(rand()%MAXFRAMEX, rand()%MAXFRAMEY);  
			state = 0;
			started = 0;
		}
		void AddCell(int x, int y){      //increases size of snake by 1 on eating fruit
			cell[size++] = new Point(x,y);
		}
		void TurnUp(){
			if( dir!='s' )
			dir = 'w'; // w is control key for turning upward
		}
		void TurnDown(){
			if( dir!='w' )
			dir = 's'; // w is control key for turning downward
		}
		void TurnLeft(){
			if( dir!='d' )
			dir = 'a'; // w is control key for turning left
		}
		void TurnRight(){
			if( dir!='a' )
			dir = 'd'; // w is control key for turning right
		}
		
		void Move(){
			// Clear screen
			system("cls");
			
			if( state == 0 ){
				if( !started ){
					//WelcomeScreen();
					cout<<"WELCOME TO SNAKE GAME made with C++ using concepts of OOPS\nMADE BY:Tushar Bhatia (2K20/SE/147) and Vipin Yadav (2K20/SE/158)\n";
					cout<<"\n\nCONTROLS: \n W-Move up \n S-Move Down \n A-Move left \n D-Move Right\n";
					cout<<"\nRULES: Do not touch the RED obstacle. Do not bite yourself\n\nOBJECTIVE:Take as many fruit($) as possible. \n";
					cout<<"\n\nPress any key to start\n";

					getch();
					started = 1;
					state = 1; 
				}else{
					cout<<"\n                     Game Over";
                    cout<<"\n\n                     SCORE: "<<score;

					if(score>=50&&score<100) { cout<<"\n\n              congrats you've achieved title of BRONZE";}
					if(score>=100&&score<150) { cout<<"\n\n              congrats you've achieved title of SILVER";}
					if(score>=150) {cout<<"\n\n                congrats you've achieved title SNAKE MASTER";}
					if(score>highscore)
					{
						highscore=score;
					}
                    cout<<"\n\n                     Current HIGHSCORE: "<<highscore;

                    score=0;
					cout<<"\n\n                 Press any key to start again";
					getch();  // wait for key input
					state = 1;
					size = 1;	
				}
			}
			
			// making snake body follow its head
			for(int i=size-1; i>0; i--){
				cell[i-1]->CopyPos(cell[i]);
			}
			
			// turning snake's head
			switch(dir){
				case 'w':
					cell[0]->MoveUp();
					break;
				case 's':
					cell[0]->MoveDown();
					break;
				case 'a':
					cell[0]->MoveLeft();
					break;
				case 'd':
					cell[0]->MoveRight();
					break;
			}
			
			if( SelfCollision() )
				state = 0;	

                if(Collision()) //collision with fruit or teleport portal
                state =0;
							
			if( fruit.GetX() == cell[0]->GetX() && fruit.GetY() == cell[0]->GetY()){
				AddCell(0,0);
				score=score+10;
                cell[0] = new Point(fruit2.GetX(),fruit2.GetY());
				fruit.SetPoint(rand()%MAXFRAMEX, rand()%MAXFRAMEY); 
                fruit2.SetPoint(rand()%MAXFRAMEX, rand()%MAXFRAMEY); 	
                Obstacle.SetPoint(rand()%MAXFRAMEX, rand()%MAXFRAMEY);
				Obstacle.SetPoint(5,6);
			}
			//drawing snake
			 for(int i=0; i<size; i++)
			 	cell[i]->Draw();
			
           
			if( !blink )
				fruit.DrawFruit('$');
                fruit2.DrawFruit2('?');
                Obstacle.DrawObstacle('X');
            
				
			blink = !blink;
		//	SetConsoleTextAttribute(console,254);
						
			Sleep(100);
		}
         int Collision() //collision with obstacle
        {
            if( Obstacle.GetX() == cell[0]->GetX() && Obstacle.GetY() == cell[0]->GetY())
            {
                    return 1;
            }
            if( fruit2.GetX() == cell[0]->GetX() && fruit2.GetY() == cell[0]->GetY())
			{
				return 1;
			}
			
            return 0;
        }
		int SelfCollision(){
			for(int i=1; i<size; i++)
				if( cell[0]->IsEqual(cell[i]) )
					return 1;
            return 0;
		}
};
int main(){
	setcursor(0,0); // make cursor invisible
	srand( (unsigned)time(NULL)); 	//random no generation
	
	// Testing snake 
	Snake snake;
	char op = 'l';
     
	do{
      
		 if(kbhit()){    //keeps track of last pressed key
			op = getch();
	                }
		switch(op){
			case 'w':
			case 'W':
				snake.TurnUp();
				break;
			
			case 's':
			case 'S':
				snake.TurnDown();
				break;
			
			case 'a':
			case 'A':
				snake.TurnLeft();
				break;
			
			case 'd':
			case 'D':
				snake.TurnRight();
				break;
		}
		snake.Move();
	}while(op != 'e');
	
	return 0;
}
